Haiyun Jin
hjin38@wisc.edu
haiyun@cs.wisc.edu

B+Tree Design Report


|--------------------------------------------------------|
| BBBBBBBB           BBBBBBBBBB                          |
| BB     BB     B        BB    BB BB   BBBBBB    BBBBBB  |
| BBBBBBBB      B        BB     BBB   B      B  B      B |
| BB     BB BBBBBBBBB    BB     BB    BBBBBBBB  BBBBBBBB |
| BB     BB     B        BB     BB    B         B        |
| BBBBBBBB      b        BB     BB     BBBBBB    BBBBBB  |
|--------------------------------------------------------|


Content:
    I. New Testcases Design
   II. Insertion Design
  III. Deletion Design
   IV. Special Notes and Comments


I. New Testcases Design:
  0. Added Scan at the beginning of the page. PASSED
  0.1 Added Scan until the end. PASSED
  1. test4(). Test on reading old index file. PASSED
  2. test6(). Test on reading bad index file. PASSED
  3. test5(). Test split non-leaf node using small page size. PASSED
              Need to change the page.h file and re-compile.
  4. test55(). Test split non-leaf node with large entries.   PASSED
              The string is %05d format in entries, however, to test on the 
          non-leaf split, need at least 340*680, the stringScan method are 
          modified to include %010d in stringScanLarge. 500000 entries are 
          used to test. CAUTION the test takes about 30 seconds.   PASSED
  5. test8(). Deletion test: delete an entry without adjust of tree. PASSED
  6. test9(). Deletion test: delete entries until redistribute leaf node. PASSED
  7. test10(). Deletion test: delete entries until merge leaf node. PASSED
  8. test11(). Deletion test: delete entries until merge non leaf node. PASSED
  9. test12(). Deletion test: delete entry from empty tree. To catch this, a
          new exception called EmptyBTreeException are created.    PASSED
  10. other auxiliary functions.


II. Insertion Design:
  The insertion of new records is implemented as a bottom-up fashion. It is 
designed as following:

findLeafNode():
  Given a page number amd Key, find the leaf node that this Key should be 
inserted. If the page is non-leaf page, find the page number that may contain 
the key and recursively call findLeafNode.

findParentOf():
  Given a page number and the last key in this page, find the parent page that
has this page number as one of its pointers. This is preferred to using a
parentPageNo field in the page structure because we don't need to update the
field when split. Although it takes some time to find the page, it will not
flush the buffer.

insertLeafNode():
  Insert a Key-Rid pair into a leaf node, if the node need to be splitted, 
call splitLeafNode() to split the node and add the key-rid pair the the proper
node after splitted.

insertNonLeafNode():
  Designed to be called by splitLeafNode/splitNonLeafNode only since only a
split in leaf/non-leaf results new non-leaf entries that need to be
copied/pushed into a non-leaf node. Similar implementation with insertLeafNode.

splitLeafNode():
  Called by insertLeafNode when there is no enough space in that node. It 
deals with two cases. One, if this leaf is not the root, it will split, use the
first key in the second node and the page number of the second node and a 
Key-PageNo pair, then it calls insertNonLeafNode to insert this pair into its
parent page. Two, if the leaf itself is the root, then it will create a new 
non-leaf node and try to insert the pair to new root.

splitNonLeafNode():
  Similar to splitLeafNode, it is called by insertNonLeafNode when there is no
enough space to insert. It will choose a pivot, and split the node into three 
part: left part, pivot, and right part. It allocates a new page and move the 
right part into the new page, updates the pages pointed by right part's keys's
parentNodeNo into the newly allocated PageId. The pivot key and the newly
allocated PageId forms a key-page pair. Then it will call insertNonLeafNode to
insert this pair to its parent page.

compare<T>(a, b):
  Due to difference types of Integer/Double and String, a generic compare and 
a generic copyKey methods are used. The method, returns negative number, zero, 
and positive number when a is smaller than, equal to and large than b.

copyKey(dest, src):
  Copy the content that src pointer points to the address that dest pointer 
points.


shiftToNextEntry():
  During the scan, nextEntry is updated by shiftToNextEntry function. This
function behaves as normal nextEntry++ but does additional work. First, if the
nextEntry is already the last key in the current page. In later case, it will
change the currentPageNum and currentPageData field to the next leaf page and
set nextEntry as zero. Second, it will check if the endScan condition is met,
and signal the caller if the scan is done.



III. Deletion Design
  The mechanism of deletion entries is just the reverse of insertion. However, 
unlike insertion that split is always prefered, in deletion, the redistribution
of entries are preferred, merging happens only when there is no extra entries in
both left and right siblings.

deleteEntry(): 
  This is the public method that is called by testcases. User pass a void*
pointer that points to the key of the record to be deleted, this method will
check what type of key it is and calls the proper function to finish the
deletion.

deleteLeafNode():
  Delete an entry from the given leaf node. The key may not be actually in this
leaf, thus not in the tree. In this case, nothing will be done and an error 
message is printed and return. Otherwise, it first deletes the corresponding key
and rid, then it checks whether the tree needs to be adjusted. If the number of
rest entries is still larger than half of the max occupancy it simply returns.
Or it will first try to borrow one from its right sibling ( if right sibling
exists). If it fails, then check the left sibling ( again, if has left sibling).
If both trial failed, it will try to merge the current page with right sibling
page by calling mergeLeafNode(). If fails, merge with left sibling page.

mergeLeafNode():
  The function merges two successive leaf nodes. It will append all entries from
the right page to the left and delete the entry in there parent page by calling
deleteNonLeafNode(). 

deleteNonLeafNode():
  This function delete an entry from a nonleaf page. After deletion, it checks
whether and what adjust needs to be done. The order of checks is same as that
in deleteLeafNode.

mergeNonLeafNode():
  Merge two successive non leaf nodes. This adjust may propagates to the root
and causes the cut down of the tree height.
  Because of the order of adjust tried by deleteNonLeafNode, it is guaranteed
that should the root is a leaf page, it has the page number of 2, thus the
expression (rootPageNum == 2) is always a good judgement of whether root is
leaf.
 


IV. Special Notes and Comments
  1. In the implementation of deleteEntry, when merge happens, the second page
is not deleted ( call bufMgr->disposePage ) because deletePage method is not
supported by BlobFile class. This is a defect of the BlobFlie class thus I
simply leave the page as orphans. Once the deletePage method are implemented,
uncomment the calls to bufMgr->disposePage will delete the orphan pages.

  2. The pages in buffer are unpinned as soon as possible except when
scanExecuting is true. In the later case, the current page pinned until all
records in the page have been accessed or end of the scan. This choice is to
ensure that the current page will not be unpinned and replaced by any other 
pages. On the othet hand, there will only one page being pinned thus will not
lead to significant buffer overuse.

  3. My implementation is quite efficient. The entries in B+Tree are sorted and
each leaf page are linked by the previous page and points to next. This allows
the scan of keys without traversing the whole tree. In addition, two additional 
optimizations are made:
  i). To efficiently insert and delete, one additional field is added to the
leaf node and non-leaf node: int size. This is used to mark the number of keys
in this node. With this field, we don't have to clear the memory whenever nodes
are splited or in record is deleted, or scan the whole page to determine the
size. This space-time trade-off worth this efficiency brought.
  ii). To efficiently locate a key, binary search (getIndex()) is used to find
the position instead of linear scan. getIndex finds the first key that is not
smaller than the given key value.

  4. The assumption that no duplicated key is allowed simplifies the
implementation in that we are assured that the leaf node will only store rids
such that the leaf node has uniform format and we can use only an array to point
to the right position.
  If duplicate keys are allowed, we have to change the format of the leaf node
such that each key corresponding to a list pointer that points to a list that
store a or several rids that points the same key, or called overflow pages.

